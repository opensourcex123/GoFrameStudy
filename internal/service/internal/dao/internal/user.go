// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// UserDao is the data access object for table user.
type UserDao struct {
	table   string      // table is the underlying table name of the DAO.
	group   string      // group is the database configuration group name of current DAO.
	columns UserColumns // columns contains all the column names of Table for convenient usage.
}

// UserColumns defines and stores column names for table user.
type UserColumns struct {
	Id              string //
	Name            string // 用户名，不代表真实姓名
	Password        string //
	Avatar          string //
	PhoneNumber     string //
	Email           string //
	City            string //
	Gender          string //
	BankNumber      string //
	Income          string // 单位为分
	BusinessLicense string // 只有type为1时才有该字段
	BusinessLevel   string // type为1时，有该字段，分5级
	Type            string // 0代表普通用户，1代表商家,2是管理员
	Status          string // -1代表审核不通过，0代表审核中，1代表审核通过
	FavorableRate   string // 好评率
	CreatedAt       string //
	UpdatedAt       string //
}

//  userColumns holds the columns for table user.
var userColumns = UserColumns{
	Id:              "id",
	Name:            "name",
	Password:        "password",
	Avatar:          "avatar",
	PhoneNumber:     "phone_number",
	Email:           "email",
	City:            "city",
	Gender:          "gender",
	BankNumber:      "bank_number",
	Income:          "income",
	BusinessLicense: "business_license",
	BusinessLevel:   "business_level",
	Type:            "type",
	Status:          "status",
	FavorableRate:   "favorable_rate",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

// NewUserDao creates and returns a new DAO object for table data access.
func NewUserDao() *UserDao {
	return &UserDao{
		group:   "default",
		table:   "user",
		columns: userColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UserDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *UserDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *UserDao) Columns() UserColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *UserDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UserDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UserDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
