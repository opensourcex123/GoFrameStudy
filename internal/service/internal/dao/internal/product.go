// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// ProductDao is the data access object for table product.
type ProductDao struct {
	table   string         // table is the underlying table name of the DAO.
	group   string         // group is the database configuration group name of current DAO.
	columns ProductColumns // columns contains all the column names of Table for convenient usage.
}

// ProductColumns defines and stores column names for table product.
type ProductColumns struct {
	Id                 string //
	ProductName        string //
	PublisherName      string //
	ProductImage       string //
	ProductPrice       string // 单位是分
	ProductStock       string //
	ProductInstruction string // 使用说明
	ProductType        string //
	ProductDiscount    string // 打折程度，1代表1折，以此类推
	PurchaseNumber     string //
	BargainingAllowed  string // 0代表不能议价，1代表可以议价
	WearDegree         string // 磨损程度，用字符串表示
	Status             string // -1代表审核不通过。0代表正在审核，1代表已发布
	CreatedAt          string //
	UpdatedAt          string //
}

//  productColumns holds the columns for table product.
var productColumns = ProductColumns{
	Id:                 "id",
	ProductName:        "product_name",
	PublisherName:      "publisher_name",
	ProductImage:       "product_image",
	ProductPrice:       "product_price",
	ProductStock:       "product_stock",
	ProductInstruction: "product_instruction",
	ProductType:        "product_type",
	ProductDiscount:    "product_discount",
	PurchaseNumber:     "purchase_number",
	BargainingAllowed:  "bargaining_allowed",
	WearDegree:         "wear_degree",
	Status:             "status",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
}

// NewProductDao creates and returns a new DAO object for table data access.
func NewProductDao() *ProductDao {
	return &ProductDao{
		group:   "default",
		table:   "product",
		columns: productColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ProductDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *ProductDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *ProductDao) Columns() ProductColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *ProductDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ProductDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ProductDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
